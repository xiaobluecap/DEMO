git branch testing #创建一个testing分支
git log --oneline --decorate #查看各个分支当前所指的对象，--decorate
git checkout testing #切换分支
git log --oneline --decorate --graph --all 提交历史、各个分支的指向以及项目的分支分叉情况
git checkout -b iss50 == git branch iss50  git checkout iss50 新建一个分支，并切换到该分支上
git checkout master   git merge iss50  将iss50合并到master分支上来
git checkout -d uu 删除uu分支
git mergetool 启动可视化合并工具
git branch 得到一个分支列表
git branch -v 查看每一个分支的最后一次提交
git branch --merged 和 --no-merged过滤列表中已经合并或尚未合并到前分支的分支
git ls-remote (remote) 来显式地获得远程引用的完整列表
git remote show (remote) 获得远程分支的更多信息
git fetch origin从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针指向新的、更新后的位置。
git remote add 命令添加一个新的远程仓库引用到当前的项目
git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支
git push origin --delete serverfix 从服务器上删除 serverfix 分支
 git branch -vv这会将所有的本地分支列出来并且包含更多的信息
 git checkout --track origin/serverfix通常会自动地创建一个跟踪
 
 
 
 
 
git status检查当前文件的状态
 gitadd 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态 
 你想知道具体修改了什么地方，可以用 git diff修改之后还没有暂存起来的变化内容
 已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged
 git rm    -f(强制删除）
 留在磁盘但不跟踪 git rm -cached  ..
 git mv name1 name2
 查看提交历史 git log
 git log -p -2最近两次提交
 git log --stat每次提交信息的简单统计
 --pretty。 这个选项可以指定使用不同于默认格式的方式展示提交历史
 git log --pretty=format:"%h - %an, %ar : %s"
 --graph 添加了一些ASCII字符串来形象地展示你的分支、合并历史
 git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
   
git log -Sfunction_name  找出添加或移除了某一个特定函数的引用的提交
 git commit --amend    这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息
 
 例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend

git reset HEAD name1 取消暂存
git checkout --name1 取消对文件的修改
查看远程仓库  git remote   指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL
添加远程仓库  git remote add <shortname> <url> 添加一个新的远程 Git 仓库  git remote add pb url
拉取仓库中有但你没有的信息时 git fetch pb
必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。

可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支
运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。
当你想要将 master 分支推送到 origin 服务器时 git push origin master
查看远程仓库 git remote show origin
远程仓库的重命名引用的名字可以运行 git remote rename pd pu
删除远程仓库  git remote rm pa


列出标签 git tag
附注标签 git tag -a v1.4 -m 'hsdjad'
查看标签信息与对应的提交信息  git tag v1.4
轻量标签 不需要其他任何信息，只需要标签姓名
git tag -a v1.2 9fceb02  后期标签
git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样 - 你可以运行 git push origin [tagname]
一次性推送很多标签  git push origin --tags
检出标签，  不能真正的呗检出，只能在特定标签上创建一个新分支  git checkout -b version2 v2.0.0

git别名 git config --global alias.ci commit
取消别名 git config --global alias.unstage 'reset HEAD --'
