创建项目
1.在合适位置创建一个目录
2.打开黑屏终端，进入到上一步创建的目录下
3.输入<django-admin   startproject   project>
5.目录层级
		<
		manage.py(一个命令行工具，可以使我们用多种方式，对django项目进行交互)
		project目录
			<
			_init_.py （一个空文件，告诉python这个目录一个被看做一个python包）
			settings.py （项目的配置文件，基本上所有的配置都在这里配置）
			urls.py （项目的URL声明）
			wsgi.py （项目与WSGI兼容的web服务器入口）
			>
		>




基本操作
1.设计表结构
	a、班级表结构
		<
		表名（grades）
		字段
			（
			班级名称（gname）
			成立时间（gdate）
			女生总数（ggirlnum）
			男生总数（gboynum）
			是否删除（isdelete）
			）
		>
	b、学生表结构
		<
		表名（students）
		字段
		   （
		    学生姓名（sname）
		    学生性别（sgender）
		    学生年龄（sage）
		    学生简介（scontend）
		    所属班级（sgrade）
		    是否删除（isdelete）
		    ）
		>

2.配置数据库
注意：django默认使用sqlite数据库
1.在settings.py文件中，通过DATABASES选项进行数据库配置
2.配置mysql
	<
	python3.x安装的是PyMySQL
	在__init__.py文件中写入两行代码
	（  import pymysql
		pymysql.install_as_MySQLdb()）
	在settings.py文件中的（
          DATABASES = {
    			'default': {
       				    'ENGINE': 'django.db.backends.mysql',
        				'NAME': "sunck",
        				'USER':"root",
       					'PASSWORD':"root",
        				'HOST':"localhost",
        				'PORT':"3306",
   						   }
					  }
						）
	格式：（
			 DATABASES = {
    			'default': {
       				    'ENGINE': 'django.db.backends.mysql',
        				'NAME': "数据库名",
        				'USER':"用户名",
       					'PASSWORD':"密码",
        				'HOST':"数据库服务器ip",
        				'PORT':"端口",
   						   }
					  }
	       ）


	>
3.创建应用（在一个项目中可以创建多个应用，每个应用进行一种业务处理）
1.打开黑屏终端，进入sunck目录下的project目录
2.在终端里执行，cd project，python   manage.py  startapp  myApp
3.myApp目录说明
			<
			admin.py   站点配置
			models.py  模型
			views.py   视图
			>
4.激活应用
1.在settings.py文件中，将myApp应用加入到INSTALLED_APPS选项中
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myApp'
				]
5.定义模型 概述：有一个数据表，就对应一个模型
1.在models.py文件中定义模型	   需要引入 from django.db import models包	模型类要继承models.Model类	
【	
from django.db import models
# Create your models here.
class Grades(models.Model):
    gname   =models.CharField(max_length=20)
    gdate   =models.DateTimeField()
    ggirlnum=models.IntegerField()
    gboynum =models.IntegerField()
    isdelete=models.BooleanField(default=False)
class Students(models.Model):
    sname   =models.CharField(max_length=20)
    sgender =models.BooleanField(default=True)
    sage    =models.IntegerField()
    scontend=models.CharField(max_length=20)
    isdelete=models.BooleanField(default=False)
    #关联外键
    sgrade=models.ForeignKey("Grades")
】    
说明：不需要定义主键，在生成时自动添加，并且值为自动增加的

6.在数据库中生成数据表
1.生成迁移文件
		【
		执行<python manage.py makemigrations>
		】
		（在migrations目录下生成一个迁移文件，此时数据库中还没有生成数据表）
2.执行迁移
		【
		执行<python  manage.py    migrate>
		】
		(相当于执行SQL语句创建数据表)

7.测试数据操作
1.进入到python  shell环境
		【
		执行<python  manage.py  shell>
		】

2.引入一些包
		【
		from myApp.models import  Grades,Students
		from django.utils import  timezone
		from datetime import *
		】
3.查询所有数据
		【
		Grades.objects.all()【类名.object.all()】
		】
4.添加数据
		【
		本质就是创建一个模型类的对象实例
		】
		【
		>>> grade1=Grades()
		>>> grade1.gname="python04"
		>>> grade1.gdate=datetime(year=2018,month=6,day=4)
		>>> grade1.ggirlnum=25
		>>> grade1.gboynum=40
		>>> grade1.save()
		】
5.查看某个对象
		【
		Grades.objects.get(pk=2)【类名.objects.get(pk=2)】
		】
6.修改数据
		【
		模型对象.属性=新值 【grade2.gboynum=60  grade2.save()】
		】
7.删除数据
		【
		模型对象.delete() 【grade2.delete()】
		注意：物理删除，数据库中的表里的数据被删除了
		】
8.关联对象
1.		【
 		>>> stu=Students()
		>>> stu.sname="韩梅梅"
		>>> stu.gender=False
		>>> stu.sage=20
		>>> stu.scontend="我叫韩梅梅"
		>>> stu.sgrade=grade1
		>>> stu.save()
 		】
2.获得关联对象的集合
		【
		需求：获取python04班的所有学生
		类名.关联的类名小写。set.all()
		grade1.students_set.all()
		】
3.需求：创建xxx属于python04
		【
		stu3=grade1.students_set.create(sname=u'梁朝伟'，sgender=True,scontend=u'我叫端口数',sage=45)
		注意：直接添加到数据库中
		】
9.启动服务器
		【
		格式  python  manage.py  runserver ip:port
		ip可以不写，不写代表本机ip
		端口号默认是8000

		python manage.py runserver

		说明：这是一个纯python写的轻量级的web服务器，仅仅在开发测试中使用
		】

10.admin站点管理
[
概述：
1.内容发布：负责添加，修改，删除内容


]
[
配置admin应用：
在settings.py中的INSTALLED_APPS中添加'django.contrib.admin',(默认是已经添加好的)

]
[
创建管理员用户：
执行 python manage.py  createsuperuser
依次输入：用户名，邮箱，密码
]
[
汉化：在settings.py
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'
]
[
管理数据表：
1.修改admin.py文件
（
from.models import Grades,Students
#注册
admin.site.register(Grades)
admin.site.register(Students)
）
10.自定义管理界面  
{
	class GradesAdmin(admin.ModelAdmin):
    #列表页属性
    list_display = ['pk','gname','gdate','ggirlnum','gboynum','isdelete']
    list_filter = ['gname']
    search_fields = ['gname']
    list_per_page = 5
    #添加修改页属性
    #fields =['ggirlnum','gboynum','gname','gdate','isdelete']
    fieldsets =[
        ("num",{"fields":['ggirlnum','gboynum']}),
        ("base",{"fields":['gname','gdate','isdelete']}),
    ]
    admin.site.register(Grades,GradesAdmin)
}
1.属性说明：
{
	列表页属性
	{
	list_display = []        显示字段（要显示说明字段就写说明字段）
    list_filter = []         过滤字段
    search_fields = []       搜索字段
    list_per_page = []       分页
	}
	添加修改页属性
	{
	fields =[]        属性的先后顺序
    fieldsets =[]     给属性分组
    注意：fields与fieldsets不能同时使用
	}
}
]
*关联对象
a、需求：在创建一个班级是可以直接添加几个学生
	class StudentsInfo(admin.TabularInline):#StackedInline
   		 	model = Students
    		extra = 2
	class GradesAdmin(admin.ModelAdmin):
   			inlines = [StudentsInfo]

*boolean显示问题
	class StudentsAdmin(admin.ModelAdmin):
    	def gender(self):
        	if self.sgender:
            	return '男'
        	else:
            	return  '女'
    	#设置页面列的名称
    	gender.short_description = "性别"
    	list_display = ['pk','sname','sage',gender,'scontend','sgrade','isdelete']

*执行动作位置
class StudentsAdmin(admin.ModelAdmin):
    def gender(self):
        if self.sgender:
            return '男'
        else:
            return  '女'
    #设置页面列的名称
    gender.short_description = "性别"
    list_display = ['pk','sname','sage',gender,'scontend','sgrade','isdelete']
    list_per_page = 10
    #执行动作的位置
    actions_on_bottom = True
    actions_on_top = False

*使用装饰器完成注册
{
@admin.register(Grades)
class GradesAdmin(admin.ModelAdmin):
    inlines = [StudentsInfo]
    #列表页属性
    list_display = ['pk','gname','gdate','ggirlnum','gboynum','isdelete']
    list_filter = ['gname']
    search_fields = ['gname']
    list_per_page = 5
    #添加修改页属性
    #fields =['ggirlnum','gboynum','gname','gdate','isdelete']
    fieldsets =[
        ("num",{"fields":['ggirlnum','gboynum']}),
        ("base",{"fields":['gname','gdate','isdelete']}),
    ]
#admin.site.register(Grades,GradesAdmin)

}

*视图的基本使用
{
	概述：在django中，视图对web请求进行回应
	      视图就是一个python函数，在views.py文件中定义

	定义视图 {
					from  django.http import HttpResponse
					def index(reques):
				    return HttpResponse("i澳门")
	}

	配置URL 修改project目录下的urls.py文件
			【           from django.conf.urls import url,include
						from django.contrib import admin

						urlpatterns = [
						    url(r'^admin/', admin.site.urls),
						    url(r'^',include('myApp.urls'))
										]
			】
	在myApp应用目录下创建一个urls.py文件
	        【
					        from django.conf.urls import url
							from .import views

							urlpatterns=[
							    url(r'^$',views.index)
			]
	        】


}

*模板的基本使用
			{
		概述;模板是HTML页面，可以根据视图中传递过来的数据进行填充
			}
		 {
		创建模板目录
			{
		创建templates，在目录下创建对应项目的模板目录（project/templates/myApp）
			}
		配置模板路径
			{
			修改settings.py文件下的 TEMPLATES 
				【
										TEMPLATES = [
					       {
					        'BACKEND': 'django.template.backends.django.DjangoTemplates',
					        'DIRS': [os.path.join(BASE_DIR,'templates')],
					        'APP_DIRS': True,


				】
			}


		定义grades.html和students.html模板
			{
			模板语法 {{输出值，可以是变量，也可以是对象.属性}}  {%执行代码段%}
			}


		http://127.0.0.1:8000/grades  
			{
			写grade.html模板
				{
									<!DOCTYPE html>
									<html lang="en">
									<head>
									    <meta charset="UTF-8">
									    <title>班级信息</title>
									</head>
									<body>
									    <h1>班级信息列表</h1>
									    <ul>
									        {%for grade in grades%}
									        <li>
									            <a href="#">{{grade.gname}}</a>
									        </li>
									        {%endfor%}
									    </ul>
									</body>
									</html>


				}
			}
			定义视图	
					{
							from .models import Grades,Students
							def grades(request):
							    #去模板里取数据
							    gradesList=Grades.objects.all()
							    #将数据传递给模板,模板在渲页面，将渲染好的页面返回浏览器
							    return render(request,'myApp/grades.html',{"grades":gradesList})


					}
			配置url     
				{
									from django.conf.urls import url
									from .import views

									urlpatterns=[
									    url(r'^$',views.index),
									    url(r'^a',views.f2),
									    url(r'^(\d+)/$',views.detail),

									    url(r'^grades/$',views.grades)
									]
				}
		 }

		http://127.0.0.1:8000/students
		{
		写students.html模板

		定义视图

		配置url
		
		}
		}












