启动服务
  net start 服务名称

创建数据库
  create database 数据库名称 charset=utf8;

切换数据库
  use 数据库；

查看数据库
  select database();

查看数据库中的表
  show tables;

删除表
  drop table 表名；

创建表
  create table pyc(id int auto_increment primary key,name varchar(20) not null,age int not null,gender bit default 1,address varchar(20),isDelete bit default 0);

 查看表结构
  desc 表名；

 查看建表语句
  show create table 表名；

 重命名表
  rename table 原表名 to 新表名；

 修改表
  alter table 表名 add|change|drop 列名 类型；


  增加数据                                      
  a.全列插入 insert into 表名 values(....)  (主键列是自动增长，但是在全列插入时需要占位，通常使用0，插入成功后以实际数据为准) 
             insert into student1 values(0,"tom",1,18,"上海"，0);

  b.缺省插入 insert into 表名(列1，列2...) values(值1，值2...)；  insert into student1(name,age,address) values("lilei",21,"南京"); 

  c.同时插入多条数据 insert into 表名 values(...),(...),...  insert into student1 values(0,"Bob",1,19,"成都",0),(0,"Alice",0,19,"上海",0),(     0,"kit",0,19,"kom",0);

  
  删除
   delete from 表名 where 条件；
   delete from  student1 where id=152916；

  修改数据
   update 表名 set 列1=值1，列2=值2，...where 条件
   update student1 set age=16 where id=152915

 查询表中的全部数据 
   select* from 表名
   select * from student1




查
基本语法
select * from 表名
 	#from是一个关键字后面是表名，表示数据来源于这张表，
	#select 后面写表中的列名，如果是这个*表示在结果集中显示表中的所有列 
	#在select后面的列名部分，可以使用as为列名起别名，这个别名显示在结果集中
	#如果要查询多个列，之间使用逗号分割
select * from student;	
select name, age from student;
select name as a,age from student;


消除重复行
  在select后面 列的前面使用distinct可以消除重复的行

  select gender from student:显示类型
  select distinct gender from student;消除重复的 


语法查询
a、语法
   	select * from 表名 where 条件

b、比较运算符
 	等于       =
 	大于       >
 	小于       <
 	大于等于     >=
 	小于等于      <=  
 	不等于        !=或<>
 	查询id值大于152914的值
 	select  * from student1 where id>152914;

c、逻辑运算符
	and   并且
	or     或者
	not    非
查询id值大于152919的女同学
select * from student where id>152919 and gender=0;

d、模糊查询
	like 
	%  表示任意多个任意字符
	_  表示一个任意字符
	查询姓 习的同学
	select * from student where name like "习%";
                                       
	select * from student where name like "习_"

e、范围查询
	in  表示在一个非连续的范围内
	between ... and ... 表示在一个连续的范围内

	查询id是8 10 12 的学生
	select * from student where id in (8,10,12);
	查询id是6-8的学生
	select * from student where id between 6 and 8;

f、空判断
	null与空字符串是不同
	判断空 is  null
	判断非空 is not null
	查询没有地址的学生
	select * from student where address is null;
	查询有地址的学生
	select * from student where address is not null;

g、优先级
小括号，not，比较运算符，逻辑运算符，
and比or优先级高，如果同时出现并且希望先选or，需要结合（）使用

聚合
	为了快速得到统计的数据，提供咯五个聚合的函数
	a. count(*)  表示计算总行数   括号中可以写（*和列名）
	b. max(列)  表示求此列的最大值
	c. min(列)  表示求此列的最小值
	d. sum(列)  表示求此列的和
	e. avg(列)  表示求此列的平均值


	查询学生总数
	select count(*) from student; select count(id) from student;
	查询女生编号最大值
	select max(id) from student where gender=0;
	查询女生编号最小值
	select min(id) from student where gender=0;
	查询女生的年龄和
	select sum(age) from student where gender=0;
	求所有学生的年龄平均值
	select avg(age) from student;


分组
	按照字段分组，表示此字段相同的数据会被放到一个集合中，分组后只能查询出相同的数据列，对于有差异的数据列，无法显示在结果集中，可以对分组后的数据进行统计，做聚合运算

	select 列1，列2，聚合... from 表名 group by 列1，列2，列3，;

	查询男女生总数
	select gender,count(*) from student group by gender;
	查询男女生总数后按年龄排序
	 select sex,count(*) from student1 group by sex,age;

	分组后的数据筛选
	select 列1，列2，聚合... from 表名 group by 列1，列2，列3，....having 列1，列2...，;

	select sex ,count(*) from student group by sex having sex,count(*);
	where与having的区别：where是对from后面指定的表进行筛选，属于对原始数据的筛选
	                    having是对group by的结果集中进行筛选


排序
	select * from 表名 order by 列1 asc|desc,列2 asc|desc...;

	a、将数据按照列1进行排序，如果某些列1的值相同，则按照列2进行排序，
	b、默认按照从小到大的顺序排序
	c、asc升序
	d、desc降序

	select * from student where isDelete=0 order by age ；将没有被删除的数据按年龄排序
	select * from student where isDelete=0 order by age desc，id desc;

分页
	select * from 表名 limit start,count;

	start 索引从0开始    select * from student1 limit0,3;

						select * from student1 where age>18 limit 0,3;

 


关联

建表语句     1.create table class(id int auto_increment primary key,name varchar(20) not null,stuNum int not null);
			2.create table student(id int auto_increment primary key,name varchar(20) not null,gender bit default 1,classid int not null,foreign key(classid) references class(id));

			插入数据：
			insert into class values(0,"python01",65),(0,"python03",46),(0,"python",95);

			insert into student values(0,"tom",1,1);
			insert into student values(0,"lilei",1,3);
			
			select student.name,class.name from class inner join student on class.id=student.classid;

			select student.name,class.name from class left join student on class.id=student.classid;

			select student.name,class.name from class right join student on class.id=student.classid;

			inner join 关联

			分类：
			1.表A inner join 表B    表示表A与表B匹配的行会出现在结果集中
			2.表A left join 表B    表A与表B匹配德夯会出现在结果集中，外加表A中独有的数据，未对应的数据使用null填充
			3.表A right join 表B    表A与表B匹配德夯会出现在结果集中,外加表B中独有的数据，未对应的数据使用null填充

